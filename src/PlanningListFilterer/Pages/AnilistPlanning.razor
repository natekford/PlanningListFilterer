@page "/"

<PageTitle>Planning List Filterer</PageTitle>

<MudDataGrid Dense="true" Hover="true" Bordered="true" Striped="true"
			 Filterable="true" Hideable="true" ShowColumnOptions="false"
			 FixedHeader="true" FixedFooter="true"
			 ColumnResizeMode="ResizeMode.None"
			 FilterMode="DataGridFilterMode.ColumnFilterMenu"
			 Items="@Entries" Loading="@IsLoading"
			 id="planning-table" @ref="Grid">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Planning List Filterer</MudText>
		<MudSpacer />
		<MudTextField Class="mb-5 username-box" DebounceInterval="100" MaxLength="20"
					  Placeholder="Enter a username..."
					  Value="@Username.Name"
					  OnDebounceIntervalElapsed="@(x => Username = new(x))" />
		<MudTooltip Text="Load">
			<MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Search"
						   OnClick="@LoadEntries" Disabled="@(!Username.IsValid)" />
		</MudTooltip>
		<MudTooltip Text="Randomize">
			<MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Shuffle"
						   OnClick="@RandomizeTable" Disabled="@(Entries.Count == 0)" />
		</MudTooltip>
		<MudTooltip Text="Save">
			<MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Download"
						   OnClick="@DownloadAsCsv" Disabled="@(Entries.Count == 0)" />
		</MudTooltip>
		<SettingsMenu Grid="@Grid" ListSettings="@ListSettings" ColumnSettings="@ColumnSettings" />
	</ToolBarContent>

	<Columns>
		<PropertyColumn Property="@(m => m.Id)" SortBy="@(m => m.Id)">
			<CellTemplate>
				<MudNavLink Class="image-nav-link" Target="_blank"
							Href="@context.Item.GetUrl()">
					<MudImage Src="@context.Item.CoverImageUrl" />
				</MudNavLink>
			</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.Title)" SortBy="@(m => m.Title)"
						CellClass="text-wrap anime-title" />
		<PropertyColumn Property="@(m => m.Start)" SortBy="@(m => m.Start)">
			<CellTemplate>@context.Item.DisplayStart()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.Episodes)" SortBy="@(m => m.Episodes)">
			<CellTemplate>@context.Item.DisplayEpisodeCount()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.Duration)" SortBy="@(m => m.Duration)">
			<CellTemplate>@context.Item.DisplayDuration()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.AverageScore)" SortBy="@(m => m.AverageScore)"
						Title="Average Score">
			<CellTemplate>@context.Item.DisplayAverageScore()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.Popularity)" SortBy="@(m => m.Popularity)">
			<CellTemplate>@context.Item.DisplayPopularity()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.FriendScore)" SortBy="@(m => m.FriendScore)"
						Title="Friend Score">
			<CellTemplate>@context.Item.DisplayFriendScore()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.FriendPopularityScored)" SortBy="@(m => m.FriendPopularityScored)"
						Title="Friends (Scored)">
			<CellTemplate>@context.Item.DisplayFriendPopularityScored()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.FriendPopularityTotal)" SortBy="@(m => m.FriendPopularityTotal)"
						Title="Friends (Total)">
			<CellTemplate>@context.Item.DisplayFriendPopularityTotal()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.PersonalScore)" SortBy="@(m => m.PersonalScore)"
						Title="Personal Score">
			<CellTemplate>@context.Item.DisplayPersonalScore()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.ScoreDiffAverage)" SortBy="@(m => m.ScoreDiffAverage)"
						Title="Score Δ (Average)">
			<CellTemplate>@context.Item.DisplayAverageScoreDiff()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.ScoreDiffFriends)" SortBy="@(m => m.ScoreDiffFriends)"
						Title="Score Δ (Friend)">
			<CellTemplate>@context.Item.DisplayFriendScoreDiff()</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.Format)" SortBy="@(m => m.Format.ToString())" />
		<PropertyColumn Property="@(m => m.IsSequel)" SortBy="@(m => !m.IsSequel)"
						Title="Sequel" />
		<PropertyColumn Property="@(m => m.Genres)" Sortable="false"
						CellClass="text-pre" @ref="@GenreColumn">
			<FilterTemplate>
				<FilterSelection Selector="@(m => m.Genres)" Column="@GenreColumn" />
			</FilterTemplate>

			<CellTemplate>
				@context.Item.DisplayGenres()
			</CellTemplate>
		</PropertyColumn>
		<PropertyColumn Property="@(m => m.Tags)" Sortable="false"
						@ref="@TagColumn">
			<FilterTemplate>
				<FilterSelection Column="@TagColumn"
								 Selector="@(m => m.Tags.Where(x => x.Value >= TagPercent).Select(x => x.Key))" />
				<MudSlider TickMarks="true" Immediate="false"
						   Min="0" Max="100" Step="5"
						   @bind-Value="@TagPercent">
					Required Tag Percentage: @TagPercent
				</MudSlider>
			</FilterTemplate>

			<CellTemplate>
				<MudExpansionPanel Class="bg-transparent"
								   Text="@context.Item.DisplayTags(0, 1)"
								   Disabled="@(context.Item.Tags.Count <= 1)"
								   HideIcon="@(context.Item.Tags.Count <= 1)">
					@context.Item.DisplayTags(1, int.MaxValue)
				</MudExpansionPanel>
			</CellTemplate>
		</PropertyColumn>
	</Columns>

	<PagerContent>
		<MudDataGridPager T="AnilistModel" />
	</PagerContent>
</MudDataGrid>

<script>
	window.downloadFileFromStream = async (fileName, contentStreamReference) => {
		const arrayBuffer = await contentStreamReference.arrayBuffer();
		const blob = new Blob([arrayBuffer]);
		const url = URL.createObjectURL(blob);
		const anchorElement = document.createElement('a');
		anchorElement.href = url;
		anchorElement.download = fileName ?? '';
		anchorElement.click();
		anchorElement.remove();
		URL.revokeObjectURL(url);
	}
</script>